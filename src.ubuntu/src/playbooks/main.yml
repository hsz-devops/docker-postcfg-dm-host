---
# we are meant to be running this via "host" networking
# where, localhost is indeed the docker-host (!!!)

- name: Safety checks
  hosts: all
  gather_facts: True
  tasks:
    # - name: dump info for troubleshooting purposes
    #   become: true
    #   setup:
    #   register: host_data_out
    #
    # - debug: msg={{ host_data_out }}

    - name: check docker-engine is already installed
      become: true
      stat: path=/etc/default/docker
      register: docker_conf_exists

    - assert:
        that:
          - "'{{ ansible_os_family }}'            == 'Debian'"
          - "'{{ ansible_distribution }}'         == 'Ubuntu'"
          - ("'{{ ansible_distribution_version }}' == '14.04'" or
             "'{{ ansible_distribution_version }}' == '16.04'")
          - "{{ ansible_virtualization_type is not defined }} or ('{{ ansible_virtualization_type }}' != 'docker')"
          #- "not ('{{ ansible_virtualization_type }}' == 'docker')"
          #- not false

- name: Post-config for newly installed Ubuntu 14.04/16.04 via docker-machine
  hosts: all
  gather_facts: False
  tasks:
    - name: Upgrade system packages
      become: true
      apt:
        upgrade: dist
        install_recommends: no
        dpkg_options: "force-confnew"
        #dpkg_options: "force-confdef,force-confold"
        update_cache: yes
        cache_valid_time: 14400

    - name: Install additional packages
      become: true
      apt:
        name: "{{ item }}"
        state: latest
      with_items:
        - htop
        - mc
        - fail2ban
        - ufw
#        - mosh
#        - tree
#        - jq
#        - vim

    # https://docs.docker.com/engine/installation/linux/ubuntulinux/

    # ---------------------------------------------------------------
    # optional configs: Create a Docker group

    - name: Make sure docker group is created
      become: true
      group:
        name:  docker
        state: present

    - name: Make sure current user is in docker group (if is not the root user)
      become: true
      user:
        name:  "{{ ansible_user_id }}"
        groups: docker
        append: yes
      when:
        "'{{ ansible_user_id }}' != 'root'"

    # ---------------------------------------------------------------
    # optional configs: Adjust memory and swap accounting

    - name: Set memory limit in GRUB
      become: true
      lineinfile: >
        dest=/etc/default/grub
        regexp=^GRUB_CMDLINE_LINUX_DEFAULT
        line='GRUB_CMDLINE_LINUX_DEFAULT="cgroup_enable=memory swapaccount=1"'
      register: grub_resutls

    - name: Load new GRUB config
      become: true
      command: update-grub
      when: grub_resutls.changed

    # ---------------------------------------------------------------
    # optional configs: Enable UFW forwarding

    - name: enable DEFAULT_FORWARD_POLICY
      lineinfile:
        dest: "/etc/default/ufw"
        backup: yes
        regexp: '^(.*)DEFAULT_FORWARD_POLICY(.*)$'
        line:   'DEFAULT_FORWARD_POLICY="ACCEPT"'

    - name: Reset UFW firewall
      become: true
      ufw:
        state=reset

    - name: Allow SSH access on instance
      become: true
      ufw: >
        rule=allow
        name=OpenSSH

    - name: Open TCP ports
      become: true
      ufw: >
        rule=allow
        port={{ item }}
        proto=tcp
      with_items:
        - 80     # Default HTTP port
        - 443    # Default HTTPS port
        #- 2375   # Docker daemon API port (non-TLS)
        - 2376   # Docker daemon API port (TLS)
        - 6783   # Weave control
        - 3376   # Swarm API port

    - name: Open UDP ports
      become: true
      ufw: >
        rule=allow
        port={{ item }}
        proto=udp
      with_items:
        - 4789 # VXLAN
        - 6783 # Weave - data
        - 6784 # Weave - data

    - name: Set to deny incoming requests by default
      become: true
      ufw: >
        default=deny

    - name: Turn on UFW
      become: true
      ufw: >
        state=reloaded

    # ---------------------------------------------------------------
    #
    # - name: Set hostname
    #   become: true
    #   hostname: name={{ inventory_hostname }}

    # - name: Set properly in /etc/hosts
    #   become: true
    #   lineinfile: dest=/etc/hosts regexp='^127\.0\.0\.1' line='127.0.0.1 {{ inventory_hostname }}' owner=root group=root mode=0644

- name: "SSLH setup"
  hosts: all
  gather_facts: False
  tasks:

    - name: install PIP
      become: true
      apt:
        name: python-pip
        state: latest

    - name: PIP docker
      become: true
      command: pip install --upgrade docker-py docker-compose

    - name: "SSLH: run it"
      become: true
      docker_container:
        name:  sslh--public

        image: "amondit/sslh"
        network_mode: host
        published_ports:
          - "443:443"
        # env:
        #   # LISTEN_IP:   "0.0.0.0"
        #   # LISTEN_PORT: "443"
        #   # SSH_HOST: "localhost"
        #   SSH_PORT: "{{ sslh__local_ports.ssh |default('22') }}"
        #   # OPENVPN_HOST: "localhost"
        #   OPENVPN_PORT: "{{ sslh__local_ports.ssh |default('1194') }}"
        #   # HTTPS_HOST: "localhost"
        #   HTTPS_PORT: "{{ sslh__local_ports.ssh |default('8443') }}"
        pull: true
        state: started
        restart_policy: "always"

- name: "Docker drivers"
  hosts: all
  gather_facts: False
  vars:
    - path_docker_plugins: "/usr/local/bin"
    - VERSIONS:
        "d-v-netshare": "0.18"
        "d-v-azurefile": "0.2.1"
  tasks:
    - include: ./docker-drivers/volume.yml
